name: '[Util] Sync & Import Data | Auth0 Tenants | FB Remote Config'

on:
  repository_dispatch:
    types: [Trigger-Import-Sync-Data]
  workflow_dispatch:
    inputs:
      auth0_import_permission:
        description: "Import Permissions to AUTH0"
        required: true
        default: false
        type: boolean
      auth0_import_users:
        description: "Import Users to AUTH0"
        required: true
        default: false
        type: boolean
      auth0_delete_users_before_import:
        description: "Delete Users before AUTH0 Import"
        required: true
        default: false
        type: boolean
      auth0_target_tenant:
        description: 'Auth0 Target Tenant'
        required: true
        type: choice
        options:
          - DEV
          - STAGE
      auth0_sync_tenant:
        description: "Sync AUTH0 Tenants"
        required: true
        default: false
        type: boolean
      auth0_source_tenant:
        description: 'Auth0 Source Tenant'
        required: true
        type: choice
        options:
          - DEV
          - STAGE
      auth0_dest_tenant:
        description: 'Auth0 Destination Tenant'
        required: true
        type: choice
        options:
          - STAGE
          - PROD
      firebase_sync_rc:
        description: "Sync Firebase Remote Config"
        required: true
        default: false
        type: boolean
      firebase_source_env:
        description: 'Firebase Source Environment'
        required: true
        type: choice
        options:
          - STAGE
          - PROD
      firebase_dest_env:
        description: 'Firebase Destination Environment'
        required: true
        type: choice
        options:
           - STAGE
           - PROD

jobs:
  set_env:
    name: 'Setup Inputs'
    uses: nabarun-ngo/ngo-nabarun-templates/.github/workflows/Set-Inputs.yml@main
    with:
      inputs: ${{ toJson(inputs) }}
      client_payload: ${{ toJson(github.event.client_payload) }}
  
  import_data:
    name: 'Import Data'
    needs: [set_env]
    if: ${{ fromJson(needs.set_env.outputs.variables).auth0_import_permission || fromJson(needs.set_env.outputs.variables).auth0_import_users }}
    uses: nabarun-ngo/ngo-nabarun-templates/.github/workflows/Auth0-Import.yml@main
    with:
      branch_name: 'main'
      source: 'google_drive'
      auth0_import_tenant: ${{ fromJson(needs.set_env.outputs.variables).auth0_target_tenant }}
      input_file: 'Application_Access_Management.xlsx'
      import_data: ${{ fromJson(needs.set_env.outputs.variables).auth0_import_permission }}
      import_user: ${{ fromJson(needs.set_env.outputs.variables).auth0_import_users }}
      delete_old_user: ${{ fromJson(needs.set_env.outputs.variables).auth0_delete_users_before_import }}
      doppler_project: 'nabarun_tools'
      dry_run: false
      app_base_url : 'https://ngonabarun-stage.appspot.com'
    secrets:
      doppler_service_token: ${{ fromJson(needs.set_env.outputs.variables).auth0_target_tenant == 'STAGE' && secrets.DOPPLER_TOKEN_NABARUN_TOOLS_STAGE || secrets.DOPPLER_TOKEN_NABARUN_TOOLS_DEV }}
      gcp_service_account: ${{ secrets.FB_SA_KEY_STAGE }}
      app_token : ${{ secrets.APP_APIKEY }}


  sync_data_auth0:
    name: 'Sync Data - Auth0'
    needs: set_env
    if: ${{ fromJson(needs.set_env.outputs.variables).auth0_sync_tenant }}
    uses: nabarun-ngo/ngo-nabarun-templates/.github/workflows/Auth0-Sync-v2.yml@main
    secrets:
      source_config : ${{ fromJson(needs.set_env.outputs.variables).auth0_source_tenant == 'STAGE' && secrets.AUTH0_CONFIG_STAGE || secrets.AUTH0_CONFIG_DEV }}
      dest_config : ${{ fromJson(needs.set_env.outputs.variables).auth0_dest_tenant == 'PROD' && secrets.AUTH0_CONFIG_PROD || secrets.AUTH0_CONFIG_STAGE }}

       
  sync_data_firebase:
    name: 'Sync Data - Firebase'
    needs: set_env
    if: ${{ fromJson(needs.set_env.outputs.variables).firebase_sync_rc }}
    uses: nabarun-ngo/ngo-nabarun-templates/.github/workflows/Firebase-Sync-v2.yml@main
    with:
      firebase_source_project: ${{ fromJson(needs.set_env.outputs.variables).firebase_source_env == 'PROD' && 'wengonabarun' ||  'nabarun-test' }}
      firebase_target_project: ${{ fromJson(needs.set_env.outputs.variables).firebase_dest_env == 'PROD' && 'wengonabarun' ||  'nabarun-test' }}
    secrets:
      firebase_service_account_source: ${{ fromJson(needs.set_env.outputs.variables).firebase_source_env == 'PROD' && secrets.FB_SA_KEY_PROD ||  secrets.FB_SA_KEY_STAGE }}
      firebase_service_account_target: ${{ fromJson(needs.set_env.outputs.variables).firebase_dest_env == 'PROD' && secrets.FB_SA_KEY_PROD || secrets.FB_SA_KEY_STAGE }}
       

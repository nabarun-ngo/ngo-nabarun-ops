name: '[Util] Import & Sync Data'
run-name: >
  ${{ (github.event.client_payload.auth0_sync_tenant || inputs.auth0_sync_tenant) && format('Syncing Auth0 tenant from {0} to {1}', github.event.client_payload.auth0_source_tenant || inputs.auth0_source_tenant, github.event.client_payload.auth0_dest_tenant || inputs.auth0_dest_tenant) || '' }}
  ${{ (github.event.client_payload.firebase_sync_rc || inputs.firebase_sync_rc) && format(' & Firebase env from {0} to {1}', github.event.client_payload.firebase_source_env || inputs.firebase_source_env, github.event.client_payload.firebase_dest_env || inputs.firebase_dest_env) || '' }}

on:
  repository_dispatch:
    types: 
      - Trigger-Import-Sync-Data

  workflow_dispatch:
    inputs:
      auth0_sync_tenant:
        description: "Sync AUTH0 Tenants"
        required: true
        default: false
        type: boolean
      auth0_source_tenant:
        description: 'Auth0 Source Tenant'
        required: true
        type: choice
        options:
          - DEV
          - STAGE
      auth0_dest_tenant:
        description: 'Auth0 Destination Tenant'
        required: true
        type: choice
        options:
          - STAGE
          - DEV
      firebase_sync_rc:
        description: "Sync Firebase Remote Config"
        required: false
        type: boolean
        default: false
      firebase_source_env:
        description: 'Firebase Source Environment'
        required: false
        type: string
        default: 'STAGE'
      firebase_dest_env:
        description: 'Firebase Destination Environment'  
        required: false
        type: string
        default: 'PROD'

jobs:
  set_env:
    name: 'Setup Inputs'
    uses: nabarun-ngo/ngo-nabarun-templates/.github/workflows/Setup-Env.yml@main
    with:
      inputs: ${{ toJson(inputs) }}
      client_payload: ${{ toJson(github.event.client_payload) }}
      script_path: scripts/set_run_name_sync.sh

  # sync_data_auth0:
  #   name: 'Sync Auth0 Data'
  #   needs: set_env
  #   if: ${{ fromJson(needs.set_env.outputs.variables).auth0_sync_tenant }}
  #   uses: nabarun-ngo/ngo-nabarun-templates/.github/workflows/Sync-Auth0-v2.yml@main
  #   secrets:
  #     source_config : ${{ fromJson(needs.set_env.outputs.variables).auth0_source_tenant == 'STAGE' && secrets.AUTH0_CONFIG_STAGE || secrets.AUTH0_CONFIG_DEV }}
  #     dest_config : ${{ fromJson(needs.set_env.outputs.variables).auth0_dest_tenant == 'STAGE' && secrets.AUTH0_CONFIG_STAGE || secrets.AUTH0_CONFIG_DEV }}

  # sync_data_firebase:
  #   name: 'Sync Firebase Remote Config'
  #   needs: set_env
  #   if: ${{ fromJson(needs.set_env.outputs.variables).firebase_sync_rc }}
  #   uses: nabarun-ngo/ngo-nabarun-templates/.github/workflows/Firebase-Sync-v2.yml@main
  #   with:
  #     firebase_source_project: ${{ fromJson(needs.set_env.outputs.variables).firebase_source_env == 'STAGE' && vars.FB_PROJECT_ID_STAGE || vars.FB_PROJECT_ID_DEV }}
  #     firebase_target_project: ${{ fromJson(needs.set_env.outputs.variables).firebase_dest_env == 'PROD' && vars.FB_PROJECT_ID_PROD || vars.FB_PROJECT_ID_STAGE }}
  #   secrets:
  #     firebase_service_account_source: ${{ fromJson(needs.set_env.outputs.variables).firebase_source_env == 'STAGE' && secrets.FB_SA_KEY_STAGE || secrets.FB_SA_KEY_DEV }}
  #     firebase_service_account_target: ${{ fromJson(needs.set_env.outputs.variables).firebase_dest_env == 'PROD' && secrets.FB_SA_KEY_PROD || secrets.FB_SA_KEY_STAGE }}

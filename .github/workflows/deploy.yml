name: '[Deploy] Deploy to GCP (GAE), Firebase (Hosting), Sync Env (Auth0,Remote Config), SmokeTest'
on:
  repository_dispatch:
    types: [Trigger-Deploy-Sync-Test]
  workflow_dispatch:
    inputs:
     fe_deploy:
       description: 'Deploy Frontend (Angular)'
       required: true
       type: boolean
       default: false
     fe_tag_name:
       required: true
       description: 'Tag to deploy (Frontend)'
       type: string
     be_deploy:
       description: 'Deploy Backend (Spring Boot)'
       required: true
       type: boolean
       default: false
     be_tag_name:
       required: true
       description: 'Tag to deploy (Backend)'
       type: string
     target_env:
       required: true
       description: 'Target Environment'
       type: choice
       options:
         - stage
         - prod
     auth0_sync:
       description: 'Sync Environments'
       required: true
       type: boolean
       default: false
     run_smoke_test:
       description: 'Run Smoke Test'
       required: true
       type: boolean
       default: true    

jobs:
  set_env:
    name: 'SetUp Environment'
    uses: nabarun-ngo/ngo-nabarun-templates/.github/workflows/Set-Inputs.yml@main
    with:
      inputs: ${{ toJson(inputs) }}
      client_payload: ${{ toJson(github.event.client_payload) }}
     
  firebase_deploy:
    if: ${{ fromJson(needs.set_env.outputs.variables).fe_deploy }}
    needs: set_env
    name: Deploy to Firebase
    uses: nabarun-ngo/ngo-nabarun-templates/.github/workflows/Firebase-Deploy.yml@main
    with:
     tag_name: ${{ fromJson(needs.set_env.outputs.variables).fe_tag_name }}
     firebase_project_id: ${{ fromJson(needs.set_env.outputs.variables).target_env == 'prod' && 'wengonabarun' || 'nabarun-test' }}
     npm_run_command: ${{ fromJson(needs.set_env.outputs.variables).target_env == 'prod' && 'build' || 'buildstage' }}
    secrets:
      firebase_service_account: ${{ fromJson(needs.set_env.outputs.variables).target_env == 'prod' && secrets.FB_SA_KEY_PROD || secrets.FB_SA_KEY_STAGE }}
      repo_token: ${{ secrets.GITHUB_TOKEN }}
  
  gcp_deploy:
    if: ${{ fromJson(needs.set_env.outputs.variables).be_deploy }}
    needs: set_env
    name: Deploy to GCP App Engine 
    uses: nabarun-ngo/ngo-nabarun-templates/.github/workflows/GCP-Deploy.yml@main
    with:
     tag_name: ${{ fromJson(needs.set_env.outputs.variables).be_tag_name }}
     target_folder: 'ngo-nabarun-app/target'
     gcp_project_id: ${{ fromJson(needs.set_env.outputs.variables).target_env == 'prod' && 'ngonabarun' || 'ngonabarun-stage' }}
     app_env: ${{ fromJson(needs.set_env.outputs.variables).target_env == 'prod' && 'prod' || 'stage' }}
     app_doppler_project_name: 'nabarun_backend' 
     app_log_level: ${{ fromJson(needs.set_env.outputs.variables).target_env == 'prod' && 'INFO' || 'DEBUG' }}
    secrets:
      gcp_service_account: ${{ fromJson(needs.set_env.outputs.variables).target_env == 'prod' && secrets.GCP_SA_KEY_PROD || secrets.GCP_SA_KEY_STAGE }}
      app_doppler_service_token: ${{ fromJson(needs.set_env.outputs.variables).target_env == 'prod' && secrets.DOPPLER_TOKEN_NABARUN_BACKEND_PROD || secrets.DOPPLER_TOKEN_NABARUN_BACKEND_STAGE }}
 

  sync_data:
      # always Running this data sync for prod deployment
      if: ${{ fromJson(needs.set_env.outputs.variables).auth0_sync || fromJson(needs.set_env.outputs.variables).target_env == 'prod' }}
      needs: set_env
      name: Trigger Sync Auth0 & Firebase
      runs-on: ubuntu-latest
      steps:
       - name: Repository Dispatch
         uses: peter-evans/repository-dispatch@v3
         with:
          repository: nabarun-ngo/ngo-nabarun-devops
          event-type: Trigger-Import-Sync-Data
          client-payload: |-
              {
                "auth0_sync_tenant": true,
                "auth0_source_tenant": "${{ fromJson(needs.set_env.outputs.variables).target_env == 'prod' && 'STAGE' || 'DEV' }}",
                "auth0_dest_tenant": "${{ fromJson(needs.set_env.outputs.variables).target_env == 'prod' && 'PROD' || 'STAGE' }}",
                "firebase_sync_rc" : ${{ fromJson(needs.set_env.outputs.variables).target_env == 'prod' }},
                "firebase_source_env" : "STAGE",
                "firebase_dest_env" : "PROD"
              }

  trigger_smoke_test:
    name: 'Trigger Smoke Test'
    if: ${{ fromJson(needs.set_env.outputs.variables).run_smoke_test && always() }}
    needs: [set_env,firebase_deploy,gcp_deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh

      - name: Check if 'Run-Smoke-Test' workflow is already running
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          running=$(gh run list --repo ${{ github.repository }} --status in_progress --json name --jq '.[] | select(.name=="[Trigger] Run Automated Test") | .name')
           if [[ -n "$running" ]]; then
            echo "TRIGGER_SMOKE_TEST=false" >> $GITHUB_ENV
          else
            echo "TRIGGER_SMOKE_TEST=true" >> $GITHUB_ENV
          fi

      - name: Print the result
        run: echo "Trigger Run-Smoke-Test ? $TRIGGER_SMOKE_TEST"
        
      - name: Repository Dispatch
        if:  env.TRIGGER_SMOKE_TEST == 'true'
        uses: peter-evans/repository-dispatch@v3
        with:
          repository: nabarun-ngo/ngo-nabarun-devops
          event-type: Trigger-Smoke-Test
          client-payload: |-
              {
                "test_env": "${{ fromJson(needs.set_env.outputs.variables).target_env }}",
                "test_type": "Smoke",
                "test_filter_tag": "${{ fromJson(needs.set_env.outputs.variables).target_env == 'prod' && '@smokeprod' || '@smoke' }}"
              }
